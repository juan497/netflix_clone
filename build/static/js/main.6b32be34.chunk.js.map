{"version":3,"sources":["logo.svg","axios.js","requests.js","Row.js","Banner.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","instance","axios","create","baseURL","API_KEY","request","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","data","results","fetchData","className","map","movie","key","id","onClick","movieTrailer","name","then","url","urlParans","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","videoId","opts","height","width","playerVars","autoplay","Banner","str","n","setMovie","requests","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.6b32be34.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","//this file is for requests\n//every single repqest is fonna have the same statring url\n\nimport axios from \"axios\";\n\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\",\n});\n\n//instance.get('/foo') -> https://api.themoviedb.org/3/foo\n\nexport default instance;","//this is a functional module, not a component\nconst API_KEY = \"94608ba3c308eeddd6e7430bdb6d12a1\";\n\n\n\n//this is an object , filled with api requests\nconst request = {\n    //look at there dox\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n    fetchDocumentaries: `/discover/movie?api_key3${API_KEY}&with_genres=99`,\n}\n\nexport default request;\n","import React,{useState,useEffect} from 'react'\nimport axios from \"./axios\";//if you have a defalut eport, you can rename variable more on 51:00:00 in netflix video\nimport request from './requests';\nimport \"./Row.css\";\nimport YouTube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\nfunction Row({title, fetchUrl, isLargeRow}) {\n    const [movies,setMovies] = useState([])\n    const [trailerUrl,setTrailerUrl] = useState(\"\");\n    \n    const opts = {\n        height: \"390\",\n        width: \"100%\",\n        playerVars: {\n            autoplay: 1,\n        },\n    };\n    useEffect(()=>{\n        //pull info(image) from tdm\n\n        //make async call, because making request to outside service it will take like half a sec,\n        //so to run a asyn cunction in use effect you write internal function and than call\n        async function fetchData(){\n            //await, when make this request, wait for promise(ansewer) to come back, and than do something\n            const request =  await axios.get(fetchUrl);\n            //console.log(request);//to see the data structure that you get back, look at object than data.results\n            setMovies(request.data.results);\n            return request;\n        }\n        fetchData();\n\n\n    },[fetchUrl]);//blank, run ounce when row loads and dont run again\n    //fectchUrl is a dependancy,  it being used outside of use effect , \n\n    // remeber,Row is inside of a map function\n    const handleClick = (movie) => {\n        if(trailerUrl){//if already click set it empty to close\n            setTrailerUrl('');\n        }else{\n            movieTrailer(movie?.name || \"\")\n            .then((url) =>{//then is a promise\n                \n                //the bottom is the url\n                //https://www.youtube.com/watch?v=p3pDJoO7pSs\n                //all we need is p3pDJoO7pSs, the id\n                \n                const urlParans = new URLSearchParams( new URL(url).search);\n                setTrailerUrl( urlParans.get(\"v\") );\n\n            })\n            .catch((error) => console.log(error));\n            \n        }\n    }\n\n    //console.log(movies);\n    return (\n        <div className=\"row\">\n            <h2>{title}</h2>\n\n            <div className=\"row__posters\">\n\n                {/*look at <img key,  remeber, react has a key that just needs unique info for each pic, so that react doesnt rerender the entire row\n                but rather it renders what it needs   */}\n\n                {movies.map(movie =>(\n                    //poster path = \"/4EYPN5mVIhKLfxGruy7Dy41dTVn.jpg\" (not a url)\n                    //so need a base url (look at top of Row.js) to concat with poster path,\n                    //sonny new the base url from api docs\n\n                    // `  ${}  `  is called string interpolation (javascript feture)\n                 <img \n                 key={movie.id} \n                 onClick = {() => handleClick(movie)}\n                 className ={`row__poster ${isLargeRow && \"row__posterLarge\"}`} \n                   src={` ${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path }`} \n                   alt={movie.name}/>   \n                \n                ))}\n            </div>\n\n            {/* <YouTube videoId={\"p3pDJoO7pSs\"} opts={opts}/>  */}\n            {/* we only want to show when we click pic */}\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts}/> }\n        </div>\n    )\n}\n\nexport default Row\n","import React, { useState,useEffect } from 'react'\nimport axios from './axios'\nimport requests from './requests'\nimport \"./Banner.css\"\n\nfunction Banner() {\n    const [movie, setMovie] = useState([]);\n    useEffect(() => {\n        async function fetchData(){\n            const request = await axios.get(requests.fetchNetflixOriginals)\n            setMovie(\n                request.data.results[ \n                    Math.floor(Math.random() * request.data.results.length - 1)\n                ]\n            );\n            return request;\n            //console.log(request.data.results[            Math.floor(Math.random() * request.data.results.length - 1)]);//we just want one, in oreder to randomly select one  use\n            //Math.floor(Math.random() * request.data.results.length - 1)\n        } \n        fetchData();\n    }, []);\n    //test if async function is working\n    console.log(movie)\n\n\n    //truncate function. from stack overflow\n    function truncate(str,n){\n        return str?.length > n ? str.substr(0,n - 1) + \"...\" : str;\n    }\n\n\n\n    return (\n        <header className=\"banner\"\n            style={{\n                backgroundSize:\"cover\",\n                backgroundImage: `url(\n                    \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\n                )`,\n                backgroundPosition:\"center center\",\n            }}\n        >\n            <div className=\"banner__contents\">\n                <h1 className=\"banner__title\">\n                    {/* some apis give you inconsistent content,\n                    so if movie title doesnt exist tserach .name ... */}\n                    {movie?.title || movie?.name || movie?.original_name}\n                </h1>\n                <div className=\"banner__buttons\">\n                    <button className=\"banner__button\">play</button>\n                    <button className=\"banner__button\">my list</button>\n\n                </div>\n                <h1 className=\"banner__description\">\n                    {/* movie?.overview */}\n                    {truncate(movie?.overview, 150)}\n                </h1>\n\n            </div>\n            {/* title */}\n            {/* div, 2 buttons */}\n            {/* description */}\n            \n\n            {/* empty div,\n            in BEM -- is a modifier */}\n            <div className=\"banner--fadeBottom\"/>\n        </header>\n    )\n}\n\nexport default Banner\n","import React,{useEffect, useState} from 'react'\nimport './Nav.css'\nfunction Nav() {\n    const [show,handleShow] =useState(false);\n\n    useEffect(() => {\n        //add a scroll listener\n        window.addEventListener(\"scroll\",() => {\n            if(window.scrollY > 100){\n                handleShow(true);\n            }else handleShow(false);\n            \n        });\n        //every time use effect gets fired off,remove the listener so you dont have 20 listenres\n        return () => {\n            window.removeEventListener(\"scroll\");\n        }\n\n    }, []);\n\n    return (\n        // in classname, you always want to be nav class, but if show true append nav__black\n        <div className={`nav ${show && \"nav__black\"}`}>\n            <img\n                className=\"nav__logo\"\n                // src=\"./netflixLogo.png\"\n                alt=\"netflix logo\"\n            />\n            <img\n                className=\"nav__avatar\"\n               // src=\"./netflixLogo.png\"\n                alt=\"netflix avatar\"\n            />\n        </div>\n    )\n}\n\nexport default Nav\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Row from './Row';\nimport requests from \"./requests\";\nimport Banner from \"./Banner\"\nimport Nav from './Nav';\n\n//api key = 94608ba3c308eeddd6e7430bdb6d12a1\n//example api request = https://api.themoviedb.org/3/movie/550?api_key=94608ba3c308eeddd6e7430bdb6d12a1\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <h1>hello</h1>\n\n      <Nav/>\n      <Banner />\n\n      <Row title=\"Netflix originals\" fetchUrl={requests.fetchNetflixOriginals }  isLargeRow = {true}/>\n      <Row title=\"trending now\" fetchUrl={requests.fetchTrending}/>\n      <Row title=\"top rated\" fetchUrl={requests.fetchTopRated}/>\n      <Row title=\"action\" fetchUrl={requests.fetchActionMovies}/>\n      <Row title=\"comedy\" fetchUrl={requests.fetchComedyMovies}/>\n      <Row title=\"horror\" fetchUrl={requests.fetchHorrorMovies}/>\n      <Row title=\"romance\" fetchUrl={requests.fetchRomanceMovies}/>\n      <Row title=\"docu\" fetchUrl={requests.fetchDocumentaries}/>\n\n    </div>  \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}